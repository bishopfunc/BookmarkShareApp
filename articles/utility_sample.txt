"""
ここから下は今の段階では使っていないが、使うかもしれない機能を実装してある。
最終的に使わない場合はデプロイ前に削除ないしコメントアウトする
"""

#Modelformsetによる実装 今回はinlineformsetでの実装を採用しているがこの方法でもおそらくできる
class CreateObjectPostView(LoginRequiredMixin, View):
    def get(self, request, *args, **kwargs):
        form = PostForm(request.POST or None)
        formset = ObjectCreateModel(request.POST or None, queryset=Object.objects.none())
        return render(request, 'articles/test2.html', {
            'form':form,
            'formset':formset,
        })
    
    def post(self, request, *args, **kwargs):
        form = PostForm(request.POST or None)

        if form.is_valid():
            post = Post()
            post.user = request.user
            post.title = form.cleaned_data['title']
            post.discription = form.cleaned_data['discription']
            post.status = form.cleaned_data['status']

            formset = ObjectCreateModel(request.POST or None, queryset=Object.objects.none())

            if formset.is_valid():
                post.save()
                objects = formset.save(commit=False)

                for file in formset.deleted_objects:
                    file.delete()
                
                for file in objects:
                    file.post_data = post
                    file.save()
                return redirect('/')
                
            else:
                return render(request, 'articles/test2.html', {
                    'form':form,
                    'formset':formset,
                })

class ArticleUpdateView(LoginRequiredMixin, View):
    def get(self, request, *args, **kwargs):
        post_data = Post.objects.get(id=self.kwargs['pk'])
        form = PostForm(
            request.POST or None, 
            initial = {
                'title':post_data.title,
                'discription':post_data.discription,
                'status':post_data.status,
            })
        formset = ObjectCreateModel(request.POST or None, queryset=Object.objects.filter(post_data__id = post_data.id))

        return render(request, 'articles/postedit.html', {
            'form': form,
            'formset': formset,
        })
    
    def post(self, request, *args, **kwargs):

        form = PostForm(request.POST or None)

        if form.is_valid():
            post = Post.objects.get(id=self.kwargs['pk'])
            post.user = request.user
            post.title = form.cleaned_data['title']
            post.discription = form.cleaned_data['discription']
            post.status = form.cleaned_data['status']

            formset = ObjectCreateModel(request.POST or None, queryset=Object.objects.filter(post_data__id = post.id))
            
            if formset.is_valid():
                post.save()
                objects = formset.save(commit=False)

                for file in formset.deleted_objects:
                    file.delete()
                
                for file in objects:
                    file.post_data = post
                    file.save()

                return redirect('article_detail', self.kwargs['pk'])
            
            return render(request, 'articles/postedit.html', {
                'form': form,
                'formset': formset,
            })
